<?php

use Illuminate\Support\Str;
use Twilio\Rest\Client;
use App\Models\AutoMessage;
use App\Models\MailMessage;
use App\Models\Province;
use App\Models\MedicationItem;
use App\Models\Auth\User;
use Illuminate\Support\Facades\Mail;

/**
 * Henerate UUID.
 *
 * @return uuid
 */
function generateUuid()
{
    return Str::uuid();
}

if (! function_exists('homeRoute')) {
    /**
     * Return the route to the "home" page depending on authentication/authorization status.
     *
     * @return string
     */
    function homeRoute()
    {
        if (access()->allow('view-backend')) {
            return 'admin.dashboard';
        } elseif (auth()->check()) {
            return 'frontend.user.dashboard';
        }

        return 'frontend.index';
    }
}

// Global helpers file with misc functions.
if (! function_exists('app_name')) {
    /**
     * Helper to grab the application name.
     *
     * @return mixed
     */
    function app_name()
    {
        return config('app.name');
    }
}

if (! function_exists('access')) {
    /**
     * Access (lol) the Access:: facade as a simple function.
     */
    function access()
    {
        return app('access');
    }
}

if (! function_exists('history')) {
    /**
     * Access the history facade anywhere.
     */
    function history()
    {
        return app('history');
    }
}

if (! function_exists('gravatar')) {
    /**
     * Access the gravatar helper.
     */
    function gravatar()
    {
        return app('gravatar');
    }
}

if (! function_exists('includeRouteFiles')) {
    /**
     * Loops through a folder and requires all PHP files
     * Searches sub-directories as well.
     *
     * @param $folder
     */
    function includeRouteFiles($folder)
    {
        $directory = $folder;
        $handle = opendir($directory);
        $directory_list = [$directory];

        while (false !== ($filename = readdir($handle))) {
            if ($filename != '.' && $filename != '..' && is_dir($directory.$filename)) {
                array_push($directory_list, $directory.$filename.'/');
            }
        }

        foreach ($directory_list as $directory) {
            foreach (glob($directory.'*.php') as $filename) {
                require $filename;
            }
        }
    }
}

if (! function_exists('getRtlCss')) {
    /**
     * The path being passed is generated by Laravel Mix manifest file
     * The webpack plugin takes the css filenames and appends rtl before the .css extension
     * So we take the original and place that in and send back the path.
     *
     * @param $path
     *
     * @return string
     */
    function getRtlCss($path)
    {
        $path = explode('/', $path);
        $filename = end($path);
        array_pop($path);
        $filename = rtrim($filename, '.css');

        return implode('/', $path).'/'.$filename.'.rtl.css';
    }
}

if (! function_exists('escapeSlashes')) {
    /**
     * Access the escapeSlashes helper.
     */
    function escapeSlashes($path)
    {
        $path = str_replace('\\', DIRECTORY_SEPARATOR, $path);
        $path = str_replace('//', DIRECTORY_SEPARATOR, $path);
        $path = trim($path, DIRECTORY_SEPARATOR);

        return $path;
    }
}

if (! function_exists('getRouteUrl')) {
    /**
     * Converts querystring params to array and use it as route params and returns URL.
     */
    function getRouteUrl($url, $url_type = 'route', $separator = '?')
    {
        $routeUrl = '';

        if (! empty($url)) {
            if ($url_type == 'route') {
                if (strpos($url, $separator) !== false) {
                    $urlArray = explode($separator, $url);
                    $url = $urlArray[0];
                    parse_str($urlArray[1], $params);
                    $routeUrl = route($url, $params);
                } else {
                    $routeUrl = route($url);
                }
            } else {
                $routeUrl = $url;
            }
        }

        return $routeUrl;
    }
}

if (! function_exists('renderMenuItems')) {
    /**
     * render sidebar menu items after permission check.
     */
    function renderMenuItems($items, $viewName = 'backend.includes.partials.sidebar-item')
    {
        foreach ($items as $item) {
            // if(!empty($item->url) && !Route::has($item->url)) {
            //     return;
            // }
            if (! empty($item->view_permission_id)) {
                if (access()->allow($item->view_permission_id)) {
                    echo view($viewName, compact('item'));
                }
            } else {
                echo view($viewName, compact('item'));
            }
        }
    }
}

if (! function_exists('checkDatabaseConnection')) {
    /**
     * @return bool
     */
    function checkDatabaseConnection()
    {
        try {
            DB::connection()->reconnect();

            return true;
        } catch (Exception $ex) {
            return false;
        }
    }
}

if (! function_exists('authUserShortName')) {
    /**
     * @return string
     */
    function authUserShortName()
    {
        try {
            if(auth()->check()){
                $user = auth()->user();
                if(!empty($user->first_name) && !empty($user->last_name)){
                    return substr($user->first_name, 0, 1).''.substr($user->first_name, 0, 1);
                }elseif(!empty($user->first_name) && empty($user->last_name)){
                    return substr($user->first_name, 0, 2);
                }else{
                    return 'MP';
                }

            }

            return true;
        } catch (Exception $ex) {
            return false;
        }
    }
}
if (! function_exists('sendMessage')) {

    function sendMessage($mobile_no=null,$type,$message_for=null,$data){
        if($type=='admin'){
           
           $body = $data."\n\n"."Pharmacy Canada"."\n"."Always with you.";
        }else{
            $message = MailMessage::where('message_for',$message_for)->first();
           $body = (isset($message->message)) ? $message->message : 'Welcome';
           if($data!==null){
            $body .= "\n".$data;
           }
           $body .= "\n\n"."Pharmacy Canada"."\n"."Always with you.";
        }
       
        
        
        $accountSid = config('app.twilio')['TWILIO_ACCOUNT_SID'];
        $authToken = config('app.twilio')['TWILIO_AUTH_TOKEN'];
        try{
            $client = new Client($accountSid, $authToken);
            $messagesend = $client->messages->create($mobile_no, [
                'from' => +16475034144,
                'body' => $body]);
                return 1;
        }
        catch (Exception $e){
         dd($e);
            return 0;
        }
    }
}

if (! function_exists('sendMail')) {
    function sendMail($type,$message_for=null,$data,$user_id = null){
        $user = User::where('id',$user_id)->first();
        if($type=='admin'){
           
            $body = $data."\n\n"."Pharmacy Canada"."\n"."Always with you.";
         }else{
             $message = MailMessage::where('message_for',$message_for)->first();
            $body = $message->message;
            if($data!==null){
             $body .= "\n".$data;
            }
            $body .= "\n\n"."Pharmacy Canada"."\n"."Always with you.";
         }
         $full_name = $user->first_name.' '.$user->last_name;
        $to_name = $full_name;
        $to_email = $user->email;
        $data = array("name"=>$full_name, "body" => $body);
        try{
        $aaaa = Mail::send('emails.mail', $data, function($message) use ($to_name, $to_email) {
        $message->to($to_email, $to_name);
        $message->subject('Pharmacy Canada Always with you');
        $message->from(env('MAIL_FROM_ADDRESS', 'rx@misterpharmacist.com'),'Pharmacy Canada');
        });

        // print_r($aaaa);
        // die('asAS');
        return 1;
    }
    catch (Exception $e){
     dd($e);
        return 0;
    }
    }
}



if (! function_exists('getAllProvince')) {
    /**
     * @return bool
     */
    function getAllProvince()
    {
        return Province::get();
    }
}

if (! function_exists('getTotalAmount')) {
    /**
     * @return bool
     */
    function getTotalAmount($ids_array)
    {
        $sum = MedicationItem::whereIn('id', $ids_array)->sum('price');
        // print_r($sum);
        // die;
        return $sum;
    }
}

if (! function_exists('getPrice')) {
    /**
     * @return bool
     */
    function getPrice($id)
    {
        $price = MedicationItem::where('id', $id)->first()->price;
        // print_r($sum);
        // die;
        return $price;
    }
}







